#####################################
#                                   #
#    Memphis Configuration BEGIN    #
#                                   #
#####################################

global:
  cluster:
    enabled: false
memphis:
  image: memphisos/memphis:1.1.1-stable
  pullPolicy: Always
  # This configures memphis UI port to default (9000)
  ui:
    port: 9000

  # Hosts name configuration for UI configuraion
  hosts:
    uiHostName: ""
    restgwHostName: ""
    brokerHostName: ""

  # Memphis config file variables configuration
  configFile:
    logsRetentionInDays: 3
    gcProducerConsumerRetentionInHours: 3
    tieredStorageUploadIntervalSeconds: 8
    dlsRetentionHours: 3
    userPassBasedAuth: true
  
  # Variables that configure Memphis credentials. Random by default
  creds:
    rootPwd: ""
    connectionToken: ""
    jwtSecret: ""
    refreshJwtSecret: ""
    encryptionSecretKey: ""
  # customConfigSecret can be used to use a custom secret for the config 
    customConfigSecret:
      enabled: false
      secret:
        name: "external-creds"
      rootPwd_key: "rootPwd"
      connectionToken_key: "connectionToken"
      jwtSecret_key: "jwtSecret"
      refreshJwtSecret_key: "refreshJwtSecret"
      encryptionSecretKey_key: "encryptionSecretKey"

  #### REMOVE
  #  secret:
  #     name: memphis-client-tls
  #   ca: "ca.crt"
  #   cert: "tls.crt"
  #   key: "tls.key" 

  # Installation source config
  source: main

  # Additional variables configuration
  extraEnvironmentVars:
    enabled: false
  #  vars:
  #    - name: KEY
  #      value: value

  # The servers name prefix, must be used for example when we want a Memphis cluster
  # spanning multiple Kubernetes clusters.
  serverNamePrefix: ""

  # Toggle profiling.
  # This enables memphis-server pprof (profiling) port, so you can see goroutines
  # stacks, memory heap sizes, etc.
  profiling:
    enabled: false
    port: 6000

  # Toggle using health check probes to better detect failures.
  healthcheck:
    # This is recommended to be enabled for Memphis deployments upgrades.
    enableHealthz: true

    # Enable liveness checks.  If this fails, then the Memphis Broker will restarted.
    liveness:
      enabled: true

      initialDelaySeconds: 10
      timeoutSeconds: 5
      # NOTE: liveness check + terminationGracePeriodSeconds can introduce unecessarily long outages
      # due to the coupling between liveness probe and terminationGracePeriodSeconds.
      # To avoid this, we make the periodSeconds of the liveness check to be about half the default
      # time that it takes for lame duck graceful stop.
      #
      # In case of using Kubernetes +1.22 with probe-level terminationGracePeriodSeconds
      # we could revise this but for now keep a minimal liveness check.
      #
      # More info:
      #
      #  https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#probe-level-terminationgraceperiodseconds
      #  https://github.com/kubernetes/kubernetes/issues/64715
      #
      periodSeconds: 60
      successThreshold: 1
      failureThreshold: 3
      # Only for Kubernetes +1.22 that have pod level probes enabled.
      terminationGracePeriodSeconds:

    # Periodically check for the server to be ready for connections while
    # the Memphis container is running.
    # Disabled by default since covered by startup probe and it is the same
    # as the liveness check.
    readiness:
      enabled: false

      initialDelaySeconds: 10
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3

    # Enable startup checks to confirm server is ready for traffic.
    # This is recommended for JetStream deployments since in cluster mode
    # it will try to ensure that the server is ready to serve streams.
    startup:
      enabled: true

      initialDelaySeconds: 10
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 30

  # securityContext for the memphis container
  securityContext: {}

  # Toggle whether to enable external access.
  # This binds a host port for Memphis client port.
  externalAccess: false

  # In case both external access and advertise are enabled
  # then a service account would be required to be able to
  # gather the public ip from a node.
  serviceAccount: ""

  # The number of connect attempts against discovered routes.
  connectRetries: 120

  # selector matchLabels for the server and service.
  # If left empty defaults are used.
  # This is helpful if you are updating from Chart version <=7.4
  selectorLabels: {}

  resources: {}

  client:
    port: 6666
    portName: "client"

  # Server settings.
  limits:
    maxConnections:
    maxSubscriptions:
    maxControlLine:
    maxPayload: 1MB

    writeDeadline:
    maxPending:
    maxPings:

    # How many seconds should pass before sending a PING
    # to a client that has no activity.
    pingInterval:

    # grace period after pod begins shutdown before starting to close client connections
    lameDuckGracePeriod: "10s"

    # duration over which to slowly close close client connections after lameDuckGracePeriod has passed
    lameDuckDuration: "30s"

  # terminationGracePeriodSeconds determines how long to wait for graceful shutdown
  # this should be at least `lameDuckGracePeriod` + `lameDuckDuration` + 20s shutdown overhead
  terminationGracePeriodSeconds: 60
  logging:
    debug:
    trace:
    logtime:
    connectErrorReports:
    reconnectErrorReports:

  # customConfigSecret can be used to use an custom secret for the config
  # of the Memphis Broker.
  # NOTE: For this to work the name of the configuration has to be
  # called `nats.conf`.
  #
  # e.g. kubectl create secret generic custom-nats-conf --from-file nats.conf
  #
  # customConfigSecret:
  #  name:
  #
  # Alternately, the generated config can be extended with extra imports using the below syntax.
  # The benefit of this is that cluster settings can be built up via helm values, but external
  # secrets can be referenced and imported alongside it.
  #
  # config:
  #   <name-of-config-item>:
  #     <configMap|secret>
  #       name: "<configMap|secret name>"
  #
  # e.g:
  #
  #  config:
  #    - name: ssh-key
  #      secret:
  #        secretName: ssh-key
  #    - name: config-vol
  #      configMap:
  #        name: log-config

  storageEngine:

    ##############################
    #                            #
    #  storageEngine Encryption  #
    #                            #
    ##############################
    encryption:
    # Use key if you want to provide the key via Helm Values
    # key: random_key

    # Use a secret reference if you want to get a key from a secret
    # secret:
    #   name: "memphis-storageEngine-encryption"
    #   key: "key"

    #################################
    #                               #
    #  storageEngine Memory Storage #
    #                               #
    #################################
    memStorage:
      enabled: true
      # storageEngine memory allocation. Default is 75% of the instance Memory available
      # size: 8Gi

    ################################
    #                              #
    #  storageEngine File Storage  #
    #                              #
    ################################
    fileStorage:
      enabled: true
      storageDirectory: /data

      # Set for use with existing PVC
      # existingClaim: storageEngine-pvc
      # claimStorageSize: 1Gi

      # Use below block to create new persistent volume
      # only used if existingClaim is not specified
      size: 30Gi
      # storageClassName: ""
      accessModes:
      - ReadWriteOnce
      annotations:
      # key: "value"

  #######################
  #                     #
  #  TLS Configuration  #
  #                     #
  #######################

  # tls:
  #   secret:
  #     name: memphis-client-tls
  #   ca: "ca.crt"
  #   cert: "tls.crt"
  #   key: "tls.key"

nameOverride: ""
namespaceOverride: ""

# An array of imagePullSecrets, and they have to be created manually in the same namespace
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
- name: regcred

# Toggle whether to use setup a Pod Security Context
# ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
# securityContext:
#   fsGroup: 1000
#   runAsUser: 1000
#   runAsNonRoot: true


updateStrategy:
  type: RollingUpdate

# Affinity for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity:
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # For details,
  # see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity).
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # For details,
  # see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity).
  # You may either edit the default settings for anti-affinity rules,
  # or specify new anti-affinity rules to use instead of the defaults.
  podAntiAffinity:
    # The topologyKey to be used.
    # Can be used to spread across different nodes, AZs, regions etc.
    topologyKey: kubernetes.io/hostname
    # Valid anti-affinity types are `soft`, `hard`, or `custom`.
    # Use `custom` if you want to supply your own anti-affinity rules in the `podAntiAffinity.custom` object.
    type: hard
    # Weight for `soft` anti-affinity rules.
    # Does not apply for other anti-affinity types.
    weight: 100
    # Change `podAntiAffinity.type` to `custom` and provide your own podAntiAffinity rules here.
    custom: {}

## Pod priority class name
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: null

# Service topology
# ref: https://kubernetes.io/docs/concepts/services-networking/service-topology/
topologyKeys: []

# Pod Topology Spread Constraints
# ref https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: zone
#   whenUnsatisfiable: DoNotSchedule

# Annotations to add to the Memphis pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# key: "value"

# Define a Pod Disruption Budget for the stateful set
# ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
podDisruptionBudget:
  enabled: true
  maxUnavailable: 1
  # minAvailable: 1

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Node tolerations for server scheduling to nodes with taints
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
#
tolerations: []
#  - key: "key"
#    operator: "Equal|Exists"
#    value: "value"
#    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

# Annotations to add to the Memphis StatefulSet
statefulSetAnnotations: {}

# Labels to add to the pods of the Memphis StatefulSet
statefulSetPodLabels: {}

# Annotations to add to the Memphis Service
serviceAnnotations: {}

# additionalContainers are the sidecar containers to add to the Memphis StatefulSet
additionalContainers: []

# additionalVolumes are the additional volumes to add to the Memphis StatefulSet
additionalVolumes: []

# additionalVolumeMounts are the additional volume mounts to add to the memphis-server and memphis-server-config-reloader containers
additionalVolumeMounts: []

cluster:
  replicas: 3
  noAdvertise: false

  # Explicitly set routes for clustering.
  # When JetStream is enabled, the serverName must be unique in the cluster.
  extraRoutes: []

  # authorization:
  #   user: foo
  #   password: pwd
  #   timeout: 0.5

# In case of both external access and advertisements being
# enabled, an initializer container will be used to gather
# the public ips.
bootconfig:
  image: memphisos/memphis-broker-boot-config-staging:0.5.4
  pullPolicy: IfNotPresent
  securityContext: {}


# The Memphis config reloader image to use.
reloader:
  enabled: true
  image: memphisos/memphis-config-reloader:latest
  pullPolicy: IfNotPresent
  securityContext: {}
  extraConfigs: []

# Prometheus Memphis Exporter configuration.
exporter:
  enabled: false
  image: natsio/prometheus-nats-exporter:0.10.1
  pullPolicy: IfNotPresent

  portName: metrics
  securityContext: {}
  resources: {}
  # Prometheus operator ServiceMonitor support. Exporter has to be enabled
  serviceMonitor:
    enabled: false
    ## Specify the namespace where Prometheus Operator is running
    ##
    # namespace: monitoring
    labels: {}
    annotations: {}
    path: /metrics
    # interval:
    # scrapeTimeout:

# Memphis busybox configuration
busybox:
  image: busybox:1.36.1
  pullPolicy: IfNotPresent

# Memphis REST Gateway configuration
restGateway:
  enabled: true
  image: memphisos/memphis-rest-gateway:1.1.2
  pullPolicy: Always
  user: root
  port: 4444
  jwtSecret: ""
  refreshJwtSecret: ""
  # Additional variables configuration
  extraEnvironmentVars:
    enabled: false
  #  vars:
  #    - name: KEY
  #      value: value
  resources: {}
  ## An example of limits/requests
  #  limits:
  #    memory: 500Mi
  #  requests:
  #    cpu: 500m
  #    memory: 500Mi

# Authentication setup
auth:
  enabled: true
  # systemAccount: "$SYS"

  # basic:
  #   noAuthUser:
  #   # List of users that can connect with basic auth,
  #   # that belong to the global account.
  #   users:

  #   # List of accounts with users that can connect
  #   # using basic auth.
  #   accounts:
  #   accounts:
  #     $SYS:
  #       users:
  #       - user: sys
  #         pass: sys
  #     js:
  #       jetstream: true
  #       users:
  #       - user: foo
  #         pass: foo
  # Reference to the Operator JWT.
  #operatorjwt:
  #  configMap:
  #    name: operator-jwt
  #    key: KO.jwt

  # Token authentication
  # token: ""

  # NKey authentication
  # nkeys:
  #   users:

  # Public key of the System Account
  #systemAccount: ACDAOKW5IIW7GTSHN55LKTUTTLXOHPFC7UQZMCQGCPJSN2RHSI7O2JOF

  resolver:
    # Disables the resolver by default
    type: none

    ##########################################
    #                                        #
    #   Embedded Memphis Account Resolver    #
    #                                        #
    ##########################################
    ##type: full

    # If the resolver type is 'full', delete when enabled will rename the jwt.
    allowDelete: false

    # Interval at which a memphis-server with a memphis based account resolver will compare
    # it's state with one random memphis based account resolver in the cluster and if needed,
    # exchange jwt and converge on the same set of jwt.
    ##interval: 2m

    # Operator JWT
    ##operator: 

    # System Account Public NKEY
    ##systemAccount: 

    # resolverPreload:
    #   <ACCOUNT>: <JWT>

    # Directory in which the account JWTs will be stored.
    store:
      dir: "/accounts/jwt"

      # Size of the account JWT storage.
      size: 1Gi

    ##############################
    #                            #
    # Memory resolver settings   #
    #                            #
    ##############################
    # type: memory
    #
    # Use a configmap reference which will be mounted
    # into the container.
    #
    # configMap:
    #   name: memphis-accounts
    #   key: resolver.conf

    ##########################
    #                        #
    #  URL resolver settings #
    #                        #
    ##########################
    #type: URL
    #url: "http://control-plane/api-gw/usermgmt/memphis/authenticate/"
    #url: "https://gi1piv1ac8.execute-api.eu-central-1.amazonaws.com/Production/jwt/v1/accounts/"

websocket:
  enabled: true
  port: 7770
  noTLS: true
  sameOrigin: false
  allowedOrigins: []
  #auth:
  #  token: memphis
  #  user: ""
  #  pass: ""
appProtocol:
  enabled: false


# Cluster Domain configured on the kubelets
# https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
k8sClusterDomain: cluster.local

# Define if Memphis is using FQDN name for clustering (i.e. memphis-0.memphis.default.svc.cluster.local) or short name (i.e. memphis-0.memphis.default).
useFQDN: true

# Add labels to all the deployed resources
commonLabels: {}

# podManagementPolicy controls how pods are created during initial scale up,
# when replacing pods on nodes, or when scaling down.
podManagementPolicy: Parallel

# Toggle that this is an upgrade to enable healthz, in case not
# using `helm upgrade` command to apply upgrades.
upgrade: false


# Metadata DB configuration
metadata:
  enabled: true
  postgresql:
    image:
      repository: memphisos/memphis-metadata
    username: postgres
    initdbScripts:
      init.sql: |
        CREATE DATABASE memphis;
  fullnameOverride: memphis-metadata
  pgpool:
    image:
      repository: memphisos/memphis-metadata-coordinator
    tls:
      enabled: false
      certificatesSecret: ""
      certFilename: ""
      certKeyFilename: ""
      certCAFilename: ""
  external:
    enabled: false
    dbTlsMutual: true
    dbName: ""
    dbHost: ""
    dbPort: ""
    dbUser: ""
  # Use it only for test purposes, will be depricated.
    dbPass: ""
  # Secret should be used to save metadata credentials.
    secret:
      enabled: false
      name: "metadata-secret"
      dbPass_key: "dbPass"
#####################################
#                                   #
#    Memphis Configuration END      #
#                                   #
#####################################
